name: Build OpenWrt_X86_Optimized

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: "0 23 5 * *"

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: X86.config
  DIY_SH: X86-new.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  FILE_NAME: X86
  TZ: Asia/Shanghai
  MAX_JOBS: 4

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id
    
    steps:
    - name: Checkout OpenWrt
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 检查服务器配置
      run: |
        echo -e "------ 系统信息 ------"
        uname -a
        lsb_release -a 2>/dev/null || echo "未安装lsb_release"
        echo -e "\n------ CPU信息 ------"
        echo "核心数: $(nproc)"
        echo "型号: $(grep -m1 'model name' /proc/cpuinfo | cut -d: -f2 | sed 's/^[[:space:]]*//')"
        echo -e "\n------ 内存信息 ------"
        free -h
        echo -e "\n------ 存储信息 ------"
        df -Th

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi -f $(docker images -q) 2>/dev/null || true
        sudo apt-mark hold grub-efi-amd64-signed
        sudo apt-get update -y
        sudo apt-get purge -y azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* snap*
        sudo apt-get full-upgrade -y
        
        sudo apt-get install -y \
          build-essential ccache clang cmake gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3 python3-pip zlib1g-dev \
          binutils bison flex autoconf automake libtool pkgconf libelf-dev \
          libfuse-dev libmpc-dev libmpfr-dev subversion ninja-build rsync \
          upx-ucl p7zip-full curl wget unzip vim
        
        sudo apt-get autoremove --purge -y
        sudo apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$(id -gn) /mnt/workdir
        df -Th

    - name: 下载固件源码
      working-directory: /mnt/workdir
      run: |
        df -hT "$PWD"
        git clone --depth=1 --branch="$REPO_BRANCH" --single-branch "$REPO_URL" openwrt
        ln -sfn "/mnt/workdir/openwrt" "$GITHUB_WORKSPACE/openwrt"
        
        cd openwrt
        {
          echo "Author: $(git show -s --format='%an')"
          echo "Date: $(git show -s --format='%cd' --date=short)"
          echo "Commit: $(git show -s --format='%s')"
          echo "Hash: $(git show -s --format='%H')"
        } > version-info.txt
        cat version-info.txt
        echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
        echo "VERSION_INFO<<EOF" >> $GITHUB_ENV
        cat version-info.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: 加载自定义配置
      run: |
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH
        cd -
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        df -Th
        
        ls -l openwrt/.config openwrt/files/ 2>/dev/null || echo "无自定义配置"

    - name: 下载依赖包
      id: package
      working-directory: "$GITHUB_WORKSPACE/openwrt"
      run: |
        echo "使用$MAX_JOBS个并行任务下载..."
        make defconfig
        make download -j$MAX_JOBS
        
        find dl -size -1024c -delete
        df -h

    - name: 编译固件
      id: compile
      working-directory: "$GITHUB_WORKSPACE/openwrt"
      run: |
        echo "开始编译，使用$MAX_JOBS个线程..."
        
        make -j$MAX_JOBS || \
        make -j$((MAX_JOBS/2)) || \
        make -j1 V=s
        
        DEVICE=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        [ -n "$DEVICE" ] && echo "DEVICE_NAME=_$DEVICE" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
        
        ls -lh bin/targets/*/*/

    - name: 清理工作空间
      if: steps.compile.outcome == 'success' && !cancelled()
      working-directory: "$GITHUB_WORKSPACE/openwrt"
      run: |
        shopt -s extglob
        rm -rf !(bin|logs|version-info.txt)
        df -h

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outcome == 'success' && !cancelled()
      run: |
        TARGET_DIR=$(find "$GITHUB_WORKSPACE/openwrt/bin/targets" -type d -path "*/targets/*/*" | head -1)
        [ -z "$TARGET_DIR" ] && { echo "错误：找不到固件目录"; exit 1; }
        
        cd "$TARGET_DIR"
        cp "$GITHUB_WORKSPACE/openwrt/version-info.txt" .
        cp "$GITHUB_WORKSPACE/openwrt/.config" "${FILE_NAME}_config_${DATE1}.config"
        rm -rf packages
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: "OpenWrt_${FILE_NAME}_${DATE1}${DEVICE_NAME}"
        path: "${{ env.FIRMWARE }}"
        retention-days: 7
        compression-level: 0

    - name: 创建发布版本
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: "OpenWrt ${FILE_NAME} ${DATE1}"
        tag: "v${DATE1}"
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          OpenWrt ${FILE_NAME} 固件编译结果
          ${{ env.VERSION_INFO }}
          编译时间: ${{ env.DATE }}
          包含插件: aria2, diskman, docker, openclash, ssr-plus等
        artifacts: "${{ env.FIRMWARE }}/*"
        artifactErrorsFailBuild: false

    - name: TG通知
      if: success()
      run: |
        FIRMWARE_SIZE=$(du -sh "${{ env.FIRMWARE }}" | cut -f1)
        curl -sSf -X POST \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="OpenWrt X86固件编译成功！%0A%0A📅 日期: ${{ env.DATE }}%0A💾 大小: ${FIRMWARE_SIZE}%0A🔧 包含插件: aria2, diskman, docker, openclash, ssr-plus"
