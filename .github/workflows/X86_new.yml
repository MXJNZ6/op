name: Build OpenWrt_X86_new

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
   - cron: 0 23 5 * ?

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: X86.config
  DIY_SH: X86-new.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  FILE_NAME: X86
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    
    steps:
    - name: Checkout OpenWrt
      uses: actions/checkout@v4

    - name: Check server configuration
      run: |
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        echo "status=success" >> ${GITHUB_OUTPUT}
        df -Th

    - name: 下载固件源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="%0AAuthor: %an%0Adate: %cd%0Acommit: %s%0Acommit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

    - name: 加载自定义设置和调整配置
      run: |
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH
        cd -
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        df -Th

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
        df -Th

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        df -Th

    - name: Clean up server space
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/
        rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
        df -hT ${PWD}

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 安全查找固件目录
        TARGET_DIR=$(find "$GITHUB_WORKSPACE/openwrt/bin/targets" -type d -path "*/targets/*/*" | head -1)
        [ -z "$TARGET_DIR" ] && { echo "错误：找不到固件目录"; exit 1; }
        cd "$TARGET_DIR" || exit 1
        
        # 复制配置文件（带日期标记）
        CONFIG_FILE_NAME="${FILE_NAME}_config_${DATE1}.config"
        cp "$GITHUB_WORKSPACE/openwrt/.config" "$CONFIG_FILE_NAME"
        
        # 设置环境变量
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE_NAME" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
        echo "当前目录文件列表："
        ls -lh

    - name: Upload all artifacts
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_${{ env.FILE_NAME }}_full_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        retention-days: 7

    - name: Create or Update release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: "OpenWrt ${{ env.FILE_NAME }} Latest"
        tag: "latest"
        allowUpdates: true
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          OpenWrt ${{ env.FILE_NAME }} 最新编译版本
          📅 编译时间: ${{ env.DATE }}
          🔧 配置文件: ${{ env.CONFIG_FILE }}
          📦 包含文件:
          - 最新固件镜像 (*.img.gz)
          - 编译配置文件 (.config)
        artifacts: |
          ${{ env.FIRMWARE }}/*.img.gz
          ${{ env.FIRMWARE }}/${{ env.CONFIG_FILE }}
        artifactErrorsFailBuild: false
        replacesArtifacts: true

    - name: TG notification
      if: success()
      run: |
        LATEST_IMG=$(ls -t ${{ env.FIRMWARE }}/*.img.gz | head -1)
        curl -sSf -X POST \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="🛠️ OpenWrt编译成功！%0A%0A▫️ 版本: ${{ env.FILE_NAME }}%0A▫️ 时间: ${{ env.DATE }}%0A▫️ 镜像: $(basename "$LATEST_IMG")%0A▫️ 配置: ${{ env.CONFIG_FILE }}%0A%0A⬇️ 下载: ${{ github.server_url }}/${{ github.repository }}/releases/latest"
