name: imm_x86-config

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: "0 23 5 * ?"

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: X86_imm.config
  DIY_SH: diy-imm.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  FILE_NAME: X86
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: System information check
      run: |
        echo "### 系统资源信息 ###"
        echo "CPU核心数: $(nproc)"
        free -h
        df -h
        echo "当前用户: $(whoami)"
        echo "工作目录: $PWD"

    - name: Environment initialization
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理系统空间
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update -y
        sudo -E apt full-upgrade -y
        
        # 安装编译依赖（分组安装提高效率）
        sudo -E apt install -y \
          build-essential ccache cmake libncurses5-dev libssl-dev \
          git gcc-multilib g++-multilib python3 python3-setuptools \
          zlib1g-dev flex bison unzip upx-ucl
        
        # 设置工作目录
        sudo mkdir -p /mnt/workdir
        sudo chown -R $USER:$USER /mnt/workdir
        [ -d "/mnt/workdir" ] || { echo "::error::工作目录创建失败"; exit 1; }

    - name: Clone source code
      working-directory: /mnt/workdir
      timeout-minutes: 15  # 设置克隆超时
      run: |
        # 带重试机制的克隆
        for i in {1..3}; do
          git clone --depth=1 --single-branch -b "$REPO_BRANCH" "$REPO_URL" openwrt && break || \
          { echo "::warning::克隆尝试 $i/3 失败，10秒后重试..."; sleep 10; }
          [ $i -eq 3 ] && { echo "::error::克隆失败"; exit 1; }
        done

        # 验证克隆结果
        cd openwrt
        git show -s --format="%H" || { echo "::error::仓库验证失败"; exit 1; }
        
        # 设置符号链接
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
        # 记录版本信息
        echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date '+%Y-%m-%d_%H%M%S')" >> $GITHUB_ENV

    - name: Apply configuration
      run: |
        # 验证关键文件存在
        [ -f "$DIY_SH" ] || { echo "::error::DIY脚本不存在"; exit 1; }
        [ -f "$CONFIG_FILE" ] || { echo "::error::配置文件不存在"; exit 1; }
        
        chmod +x "$DIY_SH"
        cd openwrt
        
        # 执行配置（带错误捕获）
        {
          "$GITHUB_WORKSPACE/$DIY_SH" &&
          cp "$GITHUB_WORKSPACE/$CONFIG_FILE" .config &&
          make defconfig
        } || {
          echo "::error::配置失败，详见日志";
          exit 1;
        }

    - name: Package artifacts
      id: package
      if: env.UPLOAD_FIRMWARE == 'true'
      run: |
        OUTPUT_DIR="/mnt/workdir/output_$BUILD_DATE"
        mkdir -p "$OUTPUT_DIR"
        
        # 复制配置文件
        CONFIG_FILE_NAME="${FILE_NAME}_${COMMIT_HASH:0:7}_${BUILD_DATE}.config"
        cp "openwrt/.config" "$OUTPUT_DIR/$CONFIG_FILE_NAME"
        
        # 验证文件
        [ -f "$OUTPUT_DIR/$CONFIG_FILE_NAME" ] || { echo "::error::文件打包失败"; exit 1; }
        
        echo "ARTIFACT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE_NAME" >> $GITHUB_ENV

    - name: Upload artifacts
      if: steps.package.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_${FILE_NAME}_${BUILD_DATE}
        path: ${{ env.ARTIFACT_DIR }}
        retention-days: 90
        compression-level: 6

    - name: Create release
      if: env.UPLOAD_RELEASE == 'true' && steps.package.outcome == 'success'
      uses: softprops/action-gh-release@v1
      with:
        name: "ImmortalWRT ${FILE_NAME} Build ${BUILD_DATE}"
        tag_name: "imm-${FILE_NAME}-${BUILD_DATE}"
        body: |
          ### 构建信息
          - 日期: ${{ env.BUILD_DATE }}
          - 提交: [${{ env.COMMIT_HASH }}](https://github.com/immortalwrt/immortalwrt/commit/${{ env.COMMIT_HASH }})
          - 配置: ${{ env.CONFIG_FILE }}
        files: ${{ env.ARTIFACT_DIR }}/*
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
