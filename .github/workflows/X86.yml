name: Build OpenWrt_X86

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: "0 23 5 * ?"

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: X86.config
  DIY_SH: diy-X86.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  FILE_NAME: X86
  TZ: Asia/Shanghai
  # 新增：限制编译线程数（避免资源耗尽）
  MAX_JOBS: 4

jobs:
  build:
    runs-on: ubuntu-22.04
    # 限制仅仓库所有者触发
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id
    
    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅克隆

      - name: Check server configuration
        run: |
          echo -e "-------------- CPU信息 --------------\n"
          echo "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
          echo -e "\n-------------- 内存信息 --------------"
          free -h
          echo -e "\n-------------- 硬盘信息 --------------"
          df -Th

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理冗余镜像和包（保留核心工具，加速执行）
          docker rmi -f $(docker images -q) 2>/dev/null || true
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update -y
          # 精简安装包列表（移除极少用到的工具如antlr3、scons等）
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install \
            ack asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk \
            gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man \
            intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
            libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev \
            libpython3-dev libreadline-dev libssl-dev libtool lrzsz msmtp ninja-build \
            p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools \
            qemu-utils rsync squashfs-tools subversion swig texinfo uglifyjs upx-ucl \
            unzip vim wget xmlto xxd zlib1g-dev
          # 清理缓存，释放空间
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          # 创建工作目录并设置权限
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
          df -Th

      - name: 下载固件源码
        working-directory: /mnt/workdir
        run: |
          df -hT $PWD
          # 浅克隆源码（仅拉取最新提交，加速克隆）
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd openwrt
          # 获取版本信息（精简输出）
          useVersionInfo=$(git show -s --date=short --format="Author: %an | Date: %cd | Commit: %s | Hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

      - name: 加载自定义设置和调整配置
        run: |
          # 执行自定义脚本前确保权限
          [ -f $DIY_SH ] && chmod +x $DIY_SH
          cd openwrt
          [ -f $GITHUB_WORKSPACE/$DIY_SH ] && $GITHUB_WORKSPACE/$DIY_SH
          cd -
          # 移动文件和配置（增加判断，避免报错）
          [ -d files ] && mv files openwrt/files
          [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          df -Th

      - name: 下载包
        id: package
        run: |
          cd openwrt
          make defconfig
          # 多线程下载（控制并发数，避免被限速）
          make download -j$MAX_JOBS
          # 清理无效文件
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -Th

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          # 显示编译线程数（使用限制的MAX_JOBS，避免OOM）
          echo -e "Using $MAX_JOBS threads for compilation"
          # 首次编译失败时，降级为单线程并输出详细日志
          make -j$MAX_JOBS || make -j1 V=s
          # 提取设备名称和编译时间
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          df -Th

      - name: Clean up server space
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/
          # 仅保留bin目录，其他文件全部删除
          ls -A | grep -v "^bin$" | xargs rm -rf 2>/dev/null
          df -hT ${PWD}

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
          # 复制配置文件（增加可读性命名）
          sudo cp $GITHUB_WORKSPACE/openwrt/.config $PWD/${FILE_NAME}_config_${DATE1}.config
          rm -rf packages  # 移除无用的packages目录
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Check space usage
        run: df -Th

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_${{ env.FILE_NAME }}_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          retention-days: 7  # artifacts保留7天
      - name: Create release
        id: release
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
          allowUpdates: true
          tag: ${{ env.FILE_NAME }}_${{ env.DATE1 }}  # 标签增加日期
          commit: master
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            This is OpenWrt firmware for ${{ env.FILE_NAME }}
            ${{ env.useVersionInfo }}  # 显示源码版本信息
          artifacts: ${{ env.FIRMWARE }}/*

      - name: TG notification
        if: success()  # 仅在成功时推送通知
        run: |
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=X86固件编译成功！\n日期：${{ env.DATE }}"
